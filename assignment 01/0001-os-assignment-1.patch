From 47867fbb727fd4c508aa20ca03e07907c8bf3f4d Mon Sep 17 00:00:00 2001
From: Ashish Kankal <ashish25895@gmail.com>
Date: Fri, 9 Apr 2021 02:12:18 +0530
Subject: [PATCH] os assignment-1

Signed-off-by: Ashish Kankal <ashish25895@gmail.com>
---
 Makefile                               |  2 +-
 arch/x86/entry/syscalls/syscall_64.tbl |  1 +
 arch/x86/mm/fault.c                    | 18 ++++++++++
 ballooning/Makefile                    |  2 ++
 ballooning/ballooning.c                | 64 ++++++++++++++++++++++++++++++++++
 include/linux/syscalls.h               |  2 ++
 6 files changed, 88 insertions(+), 1 deletion(-)
 create mode 100644 ballooning/Makefile
 create mode 100644 ballooning/ballooning.c

diff --git a/Makefile b/Makefile
index 1673c12..308fdde 100644
--- a/Makefile
+++ b/Makefile
@@ -1097,7 +1097,7 @@ export MODORDER := $(extmod-prefix)modules.order
 export MODULES_NSDEPS := $(extmod-prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ ballooning/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 7867212..348dcda 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -363,6 +363,7 @@
 439	common	faccessat2		sys_faccessat2
 440	common	process_madvise		sys_process_madvise
 441	common	epoll_pwait2		sys_epoll_pwait2
+442     common  ballooning              sys_ballooning
 
 #
 # Due to a historical design error, certain syscalls are numbered differently
diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index 441c3e9..f97fea8 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -18,6 +18,7 @@
 #include <linux/uaccess.h>		/* faulthandler_disabled()	*/
 #include <linux/efi.h>			/* efi_recover_from_page_fault()*/
 #include <linux/mm_types.h>
+#include <linux/swap.h>
 
 #include <asm/cpufeature.h>		/* boot_cpu_has, ...		*/
 #include <asm/traps.h>			/* dotraplinkage, ...		*/
@@ -35,6 +36,9 @@
 #define CREATE_TRACE_POINTS
 #include <asm/trace/exceptions.h>
 
+void balloon_send_signal(void);
+#define BALLOON_MEM_THRESHOLD 1024*1024
+
 /*
  * Returns 0 if mmiotrace is disabled, or if the fault is not
  * handled by mmiotrace:
@@ -1397,6 +1401,20 @@ void do_user_addr_fault(struct pt_regs *regs,
 	 * userland). The return to userland is identified whenever
 	 * FAULT_FLAG_USER|FAULT_FLAG_KILLABLE are both set in flags.
 	 */
+	
+        /*
+         *-----APPLICATION BALLOONING CODE------
+	 */
+        //printk("Control comes here \n");
+        //printk("memory available : %lu",si_mem_available());
+       
+        long unsigned int free_mem = nr_free_pages()<<(PAGE_SHIFT-10);
+        //printk("mem available nr_pages : %lu",free_mem);
+        if(free_mem < BALLOON_MEM_THRESHOLD){
+	   balloon_send_signal();
+        }
+
+
 	fault = handle_mm_fault(vma, address, flags, regs);
 
 	/* Quick path to respond to signals */
diff --git a/ballooning/Makefile b/ballooning/Makefile
new file mode 100644
index 0000000..44b3f57
--- /dev/null
+++ b/ballooning/Makefile
@@ -0,0 +1,2 @@
+obj-y := ballooning.o
+
diff --git a/ballooning/ballooning.c b/ballooning/ballooning.c
new file mode 100644
index 0000000..415ad94
--- /dev/null
+++ b/ballooning/ballooning.c
@@ -0,0 +1,64 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/syscalls.h>
+#include <linux/memcontrol.h>
+#include <linux/mm.h>
+#include <linux/sched/signal.h>
+#include <linux/delay.h>
+
+#define SIGBALLOON 40
+
+/* Task struct to store the victim process */
+static struct task_struct *victim = NULL;
+
+/* Siginfo to store the signal information */
+static struct kernel_siginfo sign_info;
+
+/* Function invoked on low memory below 1 GB */
+void balloon_send_signal(void){
+    
+    if(victim == NULL){
+   	/*No Process(es) registered for ballooning*/
+        printk("Process not registered for ballooning");
+    }
+    else{
+	/* Send signal to the process */
+     if(send_sig_info(SIGBALLOON, &sign_info, victim)>=0){
+    	printk("Signal sent to the process with PID: %d",victim->pid);
+        ssleep(10);
+     }
+    }
+    
+}
+EXPORT_SYMBOL(balloon_send_signal);
+
+
+SYSCALL_DEFINE0(ballooning)
+{
+
+    printk("Hello from ballooning.\n");
+    
+    // Prepare SIGBALLOON Signal 
+    sign_info.si_signo = SIGBALLOON;
+    sign_info.si_code = SI_QUEUE;
+    sign_info.si_int = 1;
+    
+    // Save Current Process
+    victim = current;
+
+    // Disable Swapping
+    if(cgroup_memory_noswap==false){
+	printk("Swapping is not disabled. Disabling swapping....\n");
+    	cgroup_memory_noswap = true;
+	printk("Swapping Disabled\n");
+    }
+    else{
+        printk("Swapping already disabled");
+    }
+ 
+    printk("Process with PID: %d registered for ballooning",victim->pid);
+  
+    return 0;
+}
+
+
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 7688bc9..4b9c58d 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1364,4 +1364,6 @@ int __sys_getsockopt(int fd, int level, int optname, char __user *optval,
 		int __user *optlen);
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
 		int optlen);
+asmlinkage long sys_ballooning(void);
+
 #endif
-- 
2.7.4