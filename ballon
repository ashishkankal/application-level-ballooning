#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/syscalls.h>
#include <linux/memcontrol.h>
#include <linux/mm.h>
#include <linux/sched/signal.h>
//#include <linux/ballooning.h>

#define SIGBALLOON 40


static struct task_struct *victim = NULL;

static struct kernel_siginfo sign_info;
int current_pid;

void balloon_send_signal(void){
    if(send_sig_info(SIGBALLOON, &sign_info, victim)>=0){
    	printk("Signal sent to the process with PID: %d",victim->pid);
    }
    
}
EXPORT_SYMBOL(balloon_send_signal);


SYSCALL_DEFINE0(ballooning)
{
    int i;
    printk("Hello from ballooning.\n");
    
    // Prepare Signal
    //struct siginfo sign_info;
    
    //memset(&sign_info,0,sizeof(struct siginfo));
    sign_info.si_signo = SIGBALLOON;
    sign_info.si_code = SI_QUEUE;
    sign_info.si_int = 1;
    
    // Save Current Process
    victim = current;

    // Disable Swapping
    if(cgroup_memory_noswap==false){
	printk("Swapping is not disabled. Disabling swapping....\n");
    	cgroup_memory_noswap = true;
	printk("Swapping Disabled\n");
	//printk("")
    }
    //Set Current PID globally
    
    printk("Process with PID: %d registered for ballooning",victim->pid);
    //int i,sig_stat;
    //for(i=0;i<5;i++){
	//long unsigned int free_m = si_mem_available();
	//printk("Free Memory: %lu",free_m);
	//balloon_send_signal(0);
	//sleep(1);
    //}
    return 0;
}
